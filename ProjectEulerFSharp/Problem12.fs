module Problem12

open NUnit.Framework
open FsUnit
open primes

//Highly divisible triangular number
//Problem 12
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

let triangleNumber i = 
  seq{1..i} |> Seq.sum 

let getFactors i =
  Seq.init i (fun j -> i - j)
  |> Seq.filter (fun j -> i % j = 0)

let getFactorsCount i =
  match i with
  | 0 -> 0
  | 1 -> 1
  | _ ->  primeFactors i
          |> Seq.groupBy (fun i -> i)
          |> Seq.map (fun (_, nums) -> nums |> Seq.length)
          |> Seq.map (fun i -> i + 1)
          |> Seq.reduce (*)

let solver numberOfDivisors =
    Seq.initInfinite (fun i -> triangleNumber i)
    |> Seq.find (fun i -> (getFactorsCount i) >= numberOfDivisors)

type solution = { 
  i: int;
  tn: int; 
  fc:int
}

let solver2 numberOfDivisors =
  Seq.unfold (fun (i, lastfactorcount, tn) -> 
                if lastfactorcount > numberOfDivisors then None
                else 
                  let factorCount = getFactorsCount tn
                  Some( ({i=i; tn=tn; fc=factorCount}) , (i+1, factorCount , tn+i+1 ) )
             ) (1,1,1)
  |> Seq.last


let problem12 = 
  solver 500

[<Test>]
let ``answer``() =
  let ans = problem12
  printfn "%i" ans
  ans |> should equal 76576500

[<Test>]
let ``first triangle number to have over five divisors is 28``()=
  solver 5 |> should equal 28

[<Test>]
let ``Number of factors of 10 is 4``()=
  getFactorsCount 10 |> should equal 4

[<Test>]
let ``Number of factors of 0 is 0``()=
  getFactorsCount 0 |> should equal 0

[<Test>]
let ``Number of factors of 1 is 1``()=
  getFactorsCount 1 |> should equal 1

[<Test>]
let ``Number of factors of 30 is 8``()=
  getFactorsCount 1 |> should equal 1

[<Test>]
let ``scratch``() = 
 ()
//  {1..10}
//  |> Seq.map (fun i -> i, getFactorsCount i, getFactors i)
//  |> Seq.iter (fun (i, c, facs) -> printfn "%i: %i (%A)" i c facs)

  
//  primeFactors 4
//  |> Seq.groupBy (fun i -> i)
//  |> Seq.map (fun (_, nums) -> nums |> Seq.length)
//  |> Seq.map (fun i -> i + 1)
////  |> Seq.reduce (*)
//  |> printfn "%A"
//  




//  let factorsOf30 = getFactors 30 
//  factorsOf30 |> Seq.iter (fun i -> i |> (printfn "%A" ))
//
//  getFactorsCount 30 |> should equal (Seq.length factorsOf30)